<html>
<head lang="it"> <!-- poem is in what language? detect? ask? -->
  <meta content="text/html; charset=utf-8" http-equiv="Content-Type"/>
  <script type="text/javascript" src="https://www.google.com/jsapi?key=ABQIAAAAUzJ_6UqPfuuygp9Xo0AGoxRYjYHH-N6Ytftz1YKT8IaSgMm3fBSIC090wMAgB4Mcecyj6FsiJdo98g"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.5/jquery.min.js"></script>
  <link type="text/css" rel="stylesheet" media="screen" href="<%= http_host %>/css/poetify.css" />
  
  <script type="text/javascript">
  
  	<!-- user-defined background -->
  	
  	var snip = function(string_to_snip) {
  		string_to_snip = string_to_snip.replace(/(^\s*)/gi,"");
  		return string_to_snip.replace(/(\s*$)/gi,"");
  	}
  	
  	var at_trace_point = 0;
  
  	var trace_it = '<%= suggest_trace_text %>'.split('/');
  	for (var j = 0; j < trace_it.length; j += 1) {
			trace_it[j] = snip(trace_it[j]);
	}
  
  	var match_trace = function(obj) {
  		if (at_trace_point == trace_it.length) {
  			console.log('spurious match call?');
  			return false;
  		}
  		matched = false;
  		if ($(obj) === undefined)
  			return false;
  		if ($(obj).children() === undefined)
  			return false;
  		if ($(obj).children()[0] === undefined)
  			return false;
  		if ($(obj).children()[0].innerHTML === undefined)
  			return false;
  		var gaga = $(obj).children()[0].innerHTML;
  		gaga = snip(gaga);
  		console.log(gaga);
  		var lady = trace_it[at_trace_point];
  		console.log(lady);
  		if (lady == gaga) {
  			matched = true;
  			at_trace_point += 1;
  		}
  		if (at_trace_point == trace_it.length) {
  			alert('reached the end');
  		}
  		return matched;
  	}
  	
	var find_trace = function(poem0, trace) {

		var line_array = poem0.split(''+String.fromCharCode(0x0A));
		var temp_array = [];
		for (var j = 0; j < line_array.length; j += 1) {
			temp_array[j] = line_array[j].replace(/(^\s*)/gi,"");
			temp_array[j] = line_array[j].replace(/(\s*$)/gi,"");
		}
		line_array = [];
		var line = 0;
		for (var j = 0; j < temp_array.length; j += 1) {
			if (temp_array[j] != '') {
				line_array[line] = temp_array[j];
				line += 1;
			}
		}
		var slash = 0;
		var poem_array = [];
		for (j = 0; j < line_array.length; j += 1) {
			temp_array = line_array[j].split('/');
			//alert(temp_array.length);
			for (var k = 0; k < temp_array.length; k += 1) {
				//alert(temp_array[k]);
				poem_array[slash] = temp_array[k];
				slash += 1;
			}
		}

		var trace_array = trace.split('/');
		for (j = 0; j < poem_array.length; j += 1) {
			poem_array[j] = poem_array[j].replace(/(^\s*)/gi,"");
			poem_array[j] = poem_array[j].replace(/(\s*$)/gi,"");
		}
		for (j = 0; j < trace_array.length; j += 1) {
			trace_array[j] = trace_array[j].replace(/(^\s*)/gi,"");
			trace_array[j] = trace_array[j].replace(/(\s*$)/gi,"");
		}
		//alert(poem_array);
		//alert(trace_array);
		//alert(poem_array.length);
		//alert(trace_array.length);
		var found;
		var traced = 0;
		for (j = 0; j < trace_array.length; j += 1) {
			found = false;
			k = 0;
			//alert(trace_array[j]);
			for (; k < poem_array.length; k += 1) {
				//alert(poem_array[k]);
				if (poem_array[k] == trace_array[j]) {
					trace[traced] = trace_array[j];
					found = true;
					traced += 1;
					break;
				}
			}
			if (!found) return false;
		}
		return true;
	}

function verse_poem()
{
  return "<%= verse %>";
}

function reverse_poem()
{
  return "<%= reverse %>";
}

/*jslint bitwise: true, browser: true, eqeqeq: true, immed: true, newcap: true, nomen: true, plusplus: true, regexp: true, undef: true, maxerr: 50, indent: 2, onevar: false */

// clicking (flips or locks the text? (switch?))
// master lock

var JOLLY = {}; // my namespace

var this_figure = {};
var that_figure = {};

// title
this_figure.title = "<%= title %>";
// poem
this_figure.poem = verse_poem();

that_figure.title = '<%= title %>'; /* this would appear to be wrong */
that_figure.poem = reverse_poem();

function reverse(in_str)
{
  var out_str = '',
      i;

  for (i = in_str.length - 1; i >= 0; i -= 1) { 
    out_str += in_str[i];
  }

  return out_str;
}

function initialize()
{
  that_figure.title = this_figure.title;
  this_figure.poem_array = this_figure.poem.split('\n');
  
  /*
  for (var j = 0; j < this_figure.poem_array.length; j += 1) {
    var s = this_figure.poem_array[j];
    that_figure.poem += (s + '\n');
  }
  */
  that_figure.poem_array = that_figure.poem.split('\n');
}

initialize();

function get_bounding(str)
{
  hidden_span = document.createElement('span');
  hidden_span.style.visibility="hidden";
  // add an invisible div just before the last element of the document
  var my_page = document.getElementById("page");
  my_page.appendChild(hidden_span);
  // place the text in it
  hidden_span.innerHTML = str;
  hidden_span.setAttribute('id',"nuke_me");
  // now read the elements width and height
  var w = hidden_span.offsetWidth;
  var h = hidden_span.offsetTop; // ?? this is not the height
  var nuke_me = document.getElementById("nuke_me");
  my_page.removeChild(nuke_me);
  
  // return it
  return {
    width: w,
    height: h
  };
}

// should be sent in larger, smaller
function pad_and_position(str, larger_width, smaller_width)
{
  left_pad = right_pad = (larger_width-smaller_width)/2;
  if ((larger_width-smaller_width)%2 == 1) right_pad += 1; 
    
  return '<span style=" padding-right:'+right_pad+'px; \
                        padding-left:'+left_pad+'px; \
                        width:'+larger_width+'px; \
                      ">'+str+'</span>';
  // text-align:center;
}

// element
// escaped segment (to prevent poetic literals messing up javascript)
function effectify(el, segment)
{
  $(el).fadeOut('slow', function () {
    var newHTML = unescape(segment);
    el.innerHTML = newHTML;
    $(el).fadeIn('slow');
  });
}

entered = 0;
journey = null;
bad_trigger = null;

// jQuery this !! use binding and all that goodness

function textual_up_identical(unique, k, one)
{
  s = ' \
    <span id="divil_outer" \
    > \
    <!-- identical --><span style="cursor:default" id="divil_inner'+unique+':'+k+'" \
    >'
    + one 
    + '</span></span>';
  return s;
}

function textual_up_same_length(unique, k, one, two)
{
  s = ' \
    <span id="divil_outer" \
    > \
    <!-- same length --><span style="cursor:default" id="divil_inner'+unique+':'+k+'" \
          onmouseover=" \
            if (journey[ '+unique+' ][ '+k+' ].evented == 0) { \
              if (journey['+unique+']['+k+'].flip == false) { \
              	if (match_trace( this )) {\
                  effectify(this,\''+escape(two)+'\'); \
                  journey['+unique+']['+k+'].flip = true; \
                }\
              }\
              e = window.event; \
              /* console.log(e); */ \
              /* console.log(\'over: unique: \'+ '+unique+' +\' k: \'+ '+k+' ); */ \
              journey['+unique+']['+k+'].evented += 1; \
              e.cancelBubble = true; \
              if (e.stopPropagation) e.stopPropagation(); \
              return false; \
            } \
          " \
          onmouseout=" \
            journey['+unique+']['+k+'].evented -= 1; \
            e = window.event; \
            /* console.log(e.target.id); */ \
            /* console.log(\'out: unique: \'+ '+unique+' +\' k: \'+ '+k+' ); */ \
            e.cancelBubble = true; \
            if (e.stopPropagation) e.stopPropagation(); \
            return false; \
          " \
    >'
    + one 
    + '</span></span>';
  return s;
}

// if trans is set to true then the transition from two to one messes up,
// else if trans is set to false then the transition from one to two messes up
function textual_up_diff(unique, k, one, two, trans)
{
  s = ' \
    <span id="divil_outer" \
    > \
    <!-- diff --><span style="cursor:default" id="divil_inner'+unique+':'+k+'" \
          onmouseover=" \
            if (journey[ '+unique+' ][ '+k+' ].evented == 0) { \
              if (journey['+unique+']['+k+'].flip == false) { \
                /* one to two - for mouseout */ if ('+trans+' == false) bad_trigger=true; else bad_trigger=false; \
                if (match_trace( this )) {\
                  effectify(this,\''+escape(two)+'\'); \
                  journey['+unique+']['+k+'].flip = true; \
                }\
              }\
              e = window.event; \
              /* console.log(e); */ \
              /* console.log(\'over: unique: \'+ '+unique+' +\' k: \'+ '+k+' ); */ \
              journey['+unique+']['+k+'].evented += 1; \
              e.cancelBubble = true; \
              if (e.stopPropagation) e.stopPropagation(); \
              return false; \
            } \
          " \
          onmouseout=" \
            if (bad_trigger == false) { \
              /* do nothing once */ \
              bad_trigger = true; \
            } else { \
              journey['+unique+']['+k+'].evented -= 1; \
            } \
            e = window.event; \
            /* console.log(e.target.id); */ \
            /* console.log(\'out: unique: \'+ '+unique+' +\' k: \'+ '+k+' ); */ \
            e.cancelBubble = true; \
            if (e.stopPropagation) e.stopPropagation(); \
            return false; \
          " \
    >'
    + one 
    + '</span></span>';
  return s;
}

// each line has a unique number
function double_up(unique, line_one, line_two)
{
  // they all have the same id, prolly not what you want

  var sequence_one = line_one.split('/');
  // console.log(sequence_one);
  var sequence_two = line_two.split('/');
  // console.log(sequence_two);
  var s = '';
  
  journey[unique] = new Array(sequence_one.length);
  for (var k = 0; k < sequence_one.length; k += 1) {
    journey[unique][k] = {};
    journey[unique][k].evented = 0;
    journey[unique][k].flip = false;
    var one = sequence_one[k];
    var two = sequence_two[k];
    if (one == two) {
      s += textual_up_identical(unique, k, one);
    } else {
      var bounds_one = get_bounding(one);
      console.log(one);
      console.log(bounds_one);
      var bounds_two = get_bounding(two);
      console.log(two);
      console.log(bounds_two);
      if (bounds_one.width > bounds_two.width) {
        two = pad_and_position(two, bounds_one.width, bounds_two.width);
        s += textual_up_diff(unique, k, one, two, true);
      } else if (bounds_two.width > bounds_one.width) {
        one = pad_and_position(one, bounds_two.width, bounds_one.width);
        s += textual_up_diff(unique, k, one, two, false);
      } else {
        one = pad_and_position(one, bounds_two.width, bounds_one.width);
        s += textual_up_same_length(unique, k, one, two);   
      }
    }
  }
  s += '<br>\n';
  
  return s;
}

/*
// each line has a unique number
function save_double_up(unique, line_one, line_two)
{
  // they all have the same id, prolly not what you want

  var sequence_one = line_one.split('/');
  var sequence_two = line_two.split('/');
  var s = '';
  
  journey[unique] = new Array(sequence_one.length);
  for (var k = 0; k < sequence_one.length; k += 1) {
    journey[unique][k] = 0;
    var one = sequence_one[k];
    var two = sequence_two[k];
    var bounds_one = get_bounding(one);
    var bounds_two = get_bounding(two);
    if (bounds_one.width > bounds_two.width)
      two = pad_and_position(two, bounds_one.width, bounds_two.width);
    else if (bounds_two.width > bounds_one.width)
      one = pad_and_position(one, bounds_two.width, bounds_one.width);
    // else do nothing
    s += ' \
      <span id="divil_outer" \
      > \
      <span id="divil_inner" \
            onmouseover=" \
              if (journey[unique][k] == 0) { \
                this.innerHTML=unique(\'' + escape(two) + '\'); \
                journey[unique][k] = 1; \
                return false; \
              } \
              " \
              onmouseout=" \
                this.innerHTML=unescape(\'' +escape(one)+ '\'); \
                journey[ '+unique+' ][ '+k+' ] = 0; \
                return false; \
              " \
      >'
      + one 
      + '</span></span>';
  }
  s += '<br><br><br>\n';
  
  return s;
}
*/

function toss()
{
  return !! Math.floor(Math.random() * 2);
}

function poemify(title, poem, the_el)
{
  var elem = document.getElementById(the_el);

  //elem.innerHTML += '<u>'+double_up(one, two)+'</u>';
  journey = new Array(poem.one.length + 1);
  
  elem.innerHTML = double_up(0, title.one, title.two);
  elem.innerHTML += '<br>\n';  
  for (var k = 0; k < poem.one.length; k += 1) {
    var one = poem.one[k];
    var two = poem.two[k];
    //console.log(one);
    //console.log(two);
    elem.innerHTML += double_up(k+1, one, two); // line by line
  }
}

function this_title()
{
  return {
    one: this_figure.title,
    two: that_figure.title
  };
}

function this_poem()
{
  return {
    one: this_figure.poem_array,
    two: that_figure.poem_array
  };
}

function show_this()
{
  /*b = get_bounding('Does this really work?');
  alert('width is '+b.width+' and height is '+b.height);
  return;*/
  
  var title = this_title();
  var poem = this_poem();
  var the_el = "dynamic_element";

  poemify(title, poem, the_el);
  
}

function that_title()
{
  return {
    two: this_figure.title,
    one: that_figure.title
  };
}

function that_poem()
{
  return {
    two: this_figure.poem_array,
    one: that_figure.poem_array
  };
}

function show_that()
{
  var title = that_title();
  var poem = that_poem();
  var the_el = "dynamic_element";

  poemify(title, poem, the_el);
}

/*
function the_other_poem()
{
  var len = this_figure.poem_array.length;
  var alpha_poem = [];
  var omega_poem = [];
  var done_array = [];
  for (var i = 0; i < len; i += 1) {
    done_array[i] = false;
  }
  var done = 0;
  while (done < len) {
    var pos = Math.floor(Math.random() * len);
    if (!done_array[pos]) {
      if (toss()) {
        alpha_poem[done] = this_figure.poem_array[pos];
        omega_poem[done] = that_figure.poem_array[pos];
      } else {
        alpha_poem[done] = that_figure.poem_array[pos];
        omega_poem[done] = this_figure.poem_array[pos];        
      }
      done_array[pos] = true;
      done += 1;
    }
  }
  return {
    one: alpha_poem,
    two: omega_poem
  };
}
*/

// just randomize poetic elements, not line ordering
function the_other_poem()
{
  var len = this_figure.poem_array.length;
  var alpha_poem = [];
  var omega_poem = [];
  var done_array = [];
  for (var i = 0; i < len; i += 1) {
    done_array[i] = false;
  }
  var done = 0;
  while (done < len) {
    if (toss()) {
      alpha_poem[done] = this_figure.poem_array[done];
      omega_poem[done] = that_figure.poem_array[done];
    } else {
      alpha_poem[done] = that_figure.poem_array[done];
      omega_poem[done] = this_figure.poem_array[done];        
    }
    done += 1;
  }
  return {
    one: alpha_poem,
    two: omega_poem
  };
}

function show_the_other()
{
  var title = (toss() ? this_title() : that_title());
  var poem = the_other_poem();
  var the_el = "dynamic_element";

  poemify(title, poem, the_el);
}

  </script>
</head>
<body>
  <div id="center_it" style="width:800px;"> <!-- adjust as necessary -->
	<script>
	$(function() {
		// Handler for .ready() called.
		the_top = $("#center_it").offset().top;
 		the_left = (($(window).width() - 800)/2);
 		// alert(the_top + " --- " + the_left);
 		$("#center_it").offset({ top: the_top, left: the_left });
	});
	</script>

	<form name='formly' class='classy'>
	<fieldset> <legend class="classy">Trace:Verse</legend>
	  <div id="page">
		
		<div id="this_side">
		  <div id_"style_chooser">
			<a href="#" onclick="show_this()">&Alpha;</a>
		  </div>
		</div>
		<br> <!-- crappy separator for now -->
		
		<div id="that_side">
		  <div id_"style_chooser">
			<a href="#" onclick="show_that()">&Omega;</a>
		  </div>
		</div>
		<br> <!-- crappy separator for now -->
		
		<div id="the_other_side">
		  <div id_"style_chooser">
			<a href="#" onclick="show_the_other()">~</a>
		  </div>
		</div>
		<br>
		
		<div id="double_figure">
		  <script type="text/javascript">
		  
			var divil = '';
			var the_el = "dynamic_element";
			divil += '<div id="' + the_el + '"></div>\n';
			document.write(divil);
			
			show_this();
		  
		  </script>
		</div>
		
		<div id=""><%= trace_text %></div>
		<a style="float:right" href='<%= http_host %>/cgi/epoet_landing_page.cgi'>back to the landing page</a>	
	  </div>
	</fieldset>
	</form>
  </div>
</body>
</html>
